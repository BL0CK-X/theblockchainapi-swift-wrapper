//
// NameServiceAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NameServiceAPI {

    /**
     * enum for parameter blockchain
     */
    public enum Blockchain_getBlockchainIdentifierFromName: String, CaseIterable {
        case ethereum = "ethereum"
        case solana = "solana"
    }

    /**
     Get the identifier
     
     - parameter blockchain: (path) The blockchain you want to use  
     - parameter network: (path) The network of the blockchain you selected  - Solana: &#x60;devnet&#x60;, &#x60;mainnet-beta&#x60; - Ethereum: &#x60;ropsten&#x60;, &#x60;mainnet&#x60;  Defaults when not provided (not applicable to path parameters): - Solana: &#x60;devnet&#x60; - Ethereum: &#x60;ropsten&#x60; 
     - parameter inputName: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBlockchainIdentifierFromName(blockchain: Blockchain_getBlockchainIdentifierFromName, network: String, inputName: InputName? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: InputBlockchainIdentifier?, _ error: Error?) -> Void)) -> RequestTask {
        return getBlockchainIdentifierFromNameWithRequestBuilder(blockchain: blockchain, network: network, inputName: inputName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the identifier
     - POST /{blockchain}/{network}/name_service/name_to_blockchain_identifier
     - <a href=\"https://github.com/BL0CK-X/blockchain-api\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      Get the blockchain identifier from a name.  e.g., Input `vitalik.eth` and output `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045`  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter blockchain: (path) The blockchain you want to use  
     - parameter network: (path) The network of the blockchain you selected  - Solana: &#x60;devnet&#x60;, &#x60;mainnet-beta&#x60; - Ethereum: &#x60;ropsten&#x60;, &#x60;mainnet&#x60;  Defaults when not provided (not applicable to path parameters): - Solana: &#x60;devnet&#x60; - Ethereum: &#x60;ropsten&#x60; 
     - parameter inputName: (body)  (optional)
     - returns: RequestBuilder<InputBlockchainIdentifier> 
     */
    open class func getBlockchainIdentifierFromNameWithRequestBuilder(blockchain: Blockchain_getBlockchainIdentifierFromName, network: String, inputName: InputName? = nil) -> RequestBuilder<InputBlockchainIdentifier> {
        var localVariablePath = "/{blockchain}/{network}/name_service/name_to_blockchain_identifier"
        let blockchainPreEscape = "\(blockchain.rawValue)"
        let blockchainPostEscape = blockchainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{blockchain}", with: blockchainPostEscape, options: .literal, range: nil)
        let networkPreEscape = "\(APIHelper.mapValueToPathItem(network))"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inputName)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InputBlockchainIdentifier>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter blockchain
     */
    public enum Blockchain_getNameForBlockchainIdentifier: String, CaseIterable {
        case ethereum = "ethereum"
        case solana = "solana"
    }

    /**
     Get the name
     
     - parameter blockchain: (path) The blockchain you want to use  
     - parameter network: (path) The network of the blockchain you selected  - Solana: &#x60;devnet&#x60;, &#x60;mainnet-beta&#x60; - Ethereum: &#x60;ropsten&#x60;, &#x60;mainnet&#x60;  Defaults when not provided (not applicable to path parameters): - Solana: &#x60;devnet&#x60; - Ethereum: &#x60;ropsten&#x60; 
     - parameter inputBlockchainIdentifier: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getNameForBlockchainIdentifier(blockchain: Blockchain_getNameForBlockchainIdentifier, network: String, inputBlockchainIdentifier: InputBlockchainIdentifier? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: InputName?, _ error: Error?) -> Void)) -> RequestTask {
        return getNameForBlockchainIdentifierWithRequestBuilder(blockchain: blockchain, network: network, inputBlockchainIdentifier: inputBlockchainIdentifier).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the name
     - POST /{blockchain}/{network}/name_service/blockchain_identifier_to_name
     - <a href=\"https://github.com/BL0CK-X/blockchain-api\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      Get the name from a blockchain identifier.  e.g., Input `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045` and output `vitalik.eth`  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter blockchain: (path) The blockchain you want to use  
     - parameter network: (path) The network of the blockchain you selected  - Solana: &#x60;devnet&#x60;, &#x60;mainnet-beta&#x60; - Ethereum: &#x60;ropsten&#x60;, &#x60;mainnet&#x60;  Defaults when not provided (not applicable to path parameters): - Solana: &#x60;devnet&#x60; - Ethereum: &#x60;ropsten&#x60; 
     - parameter inputBlockchainIdentifier: (body)  (optional)
     - returns: RequestBuilder<InputName> 
     */
    open class func getNameForBlockchainIdentifierWithRequestBuilder(blockchain: Blockchain_getNameForBlockchainIdentifier, network: String, inputBlockchainIdentifier: InputBlockchainIdentifier? = nil) -> RequestBuilder<InputName> {
        var localVariablePath = "/{blockchain}/{network}/name_service/blockchain_identifier_to_name"
        let blockchainPreEscape = "\(blockchain.rawValue)"
        let blockchainPostEscape = blockchainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{blockchain}", with: blockchainPostEscape, options: .literal, range: nil)
        let networkPreEscape = "\(APIHelper.mapValueToPathItem(network))"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inputBlockchainIdentifier)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InputName>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
