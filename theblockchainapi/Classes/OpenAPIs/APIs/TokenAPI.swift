//
// TokenAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TokenAPI {

    /**
     * enum for parameter blockchain
     */
    public enum Blockchain_getTokenMetadata: String, CaseIterable {
        case ethereum = "ethereum"
        case solana = "solana"
    }

    /**
     * enum for parameter tokenBlockchainIdentifier
     */
    public enum TokenBlockchainIdentifier_getTokenMetadata: String, CaseIterable {
        case ethereum = "ethereum"
        case solana = "solana"
    }

    /**
     Get a token's metadata
     
     - parameter blockchain: (path) The blockchain you want to use  
     - parameter network: (path) The network of the blockchain you selected  - Solana: &#x60;devnet&#x60;, &#x60;mainnet-beta&#x60; - Ethereum: &#x60;ropsten&#x60;, &#x60;mainnet&#x60;  Defaults when not provided (not applicable to path parameters): - Solana: &#x60;devnet&#x60; - Ethereum: &#x60;ropsten&#x60; 
     - parameter tokenBlockchainIdentifier: (path) The identifier of the token (e.g., &#x60;mint_address&#x60; on &#x60;Solana&#x60; or &#x60;token_address&#x60; on &#x60;Ethereum&#x60;)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTokenMetadata(blockchain: Blockchain_getTokenMetadata, network: String, tokenBlockchainIdentifier: TokenBlockchainIdentifier_getTokenMetadata, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: TokenMetadataResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getTokenMetadataWithRequestBuilder(blockchain: blockchain, network: network, tokenBlockchainIdentifier: tokenBlockchainIdentifier).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a token's metadata
     - GET /{blockchain}/{network}/token/{token_blockchain_identifier}
     - <a href=\"https://github.com/BL0CK-X/blockchain-api\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      Get the metadata of a token.  `Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter blockchain: (path) The blockchain you want to use  
     - parameter network: (path) The network of the blockchain you selected  - Solana: &#x60;devnet&#x60;, &#x60;mainnet-beta&#x60; - Ethereum: &#x60;ropsten&#x60;, &#x60;mainnet&#x60;  Defaults when not provided (not applicable to path parameters): - Solana: &#x60;devnet&#x60; - Ethereum: &#x60;ropsten&#x60; 
     - parameter tokenBlockchainIdentifier: (path) The identifier of the token (e.g., &#x60;mint_address&#x60; on &#x60;Solana&#x60; or &#x60;token_address&#x60; on &#x60;Ethereum&#x60;)  
     - returns: RequestBuilder<TokenMetadataResponse> 
     */
    open class func getTokenMetadataWithRequestBuilder(blockchain: Blockchain_getTokenMetadata, network: String, tokenBlockchainIdentifier: TokenBlockchainIdentifier_getTokenMetadata) -> RequestBuilder<TokenMetadataResponse> {
        var localVariablePath = "/{blockchain}/{network}/token/{token_blockchain_identifier}"
        let blockchainPreEscape = "\(blockchain.rawValue)"
        let blockchainPostEscape = blockchainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{blockchain}", with: blockchainPostEscape, options: .literal, range: nil)
        let networkPreEscape = "\(APIHelper.mapValueToPathItem(network))"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let tokenBlockchainIdentifierPreEscape = "\(tokenBlockchainIdentifier.rawValue)"
        let tokenBlockchainIdentifierPostEscape = tokenBlockchainIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{token_blockchain_identifier}", with: tokenBlockchainIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenMetadataResponse>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter blockchain
     */
    public enum Blockchain_listAllTokens: String, CaseIterable {
        case solana = "solana"
    }

    /**
     List all tokens
     
     - parameter blockchain: (path) The blockchain you want to use  
     - parameter network: (path) The network of the blockchain you selected  - Solana: &#x60;devnet&#x60;, &#x60;mainnet-beta&#x60; - Ethereum: &#x60;ropsten&#x60;, &#x60;mainnet&#x60;  Defaults when not provided (not applicable to path parameters): - Solana: &#x60;devnet&#x60; - Ethereum: &#x60;ropsten&#x60; 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listAllTokens(blockchain: Blockchain_listAllTokens, network: String, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: [TokenMetadataResponse]?, _ error: Error?) -> Void)) -> RequestTask {
        return listAllTokensWithRequestBuilder(blockchain: blockchain, network: network).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all tokens
     - GET /{blockchain}/{network}/all_tokens
     - <a href=\"https://github.com/BL0CK-X/blockchain-api\" target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.      List all tokens.  `Cost: 1 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter blockchain: (path) The blockchain you want to use  
     - parameter network: (path) The network of the blockchain you selected  - Solana: &#x60;devnet&#x60;, &#x60;mainnet-beta&#x60; - Ethereum: &#x60;ropsten&#x60;, &#x60;mainnet&#x60;  Defaults when not provided (not applicable to path parameters): - Solana: &#x60;devnet&#x60; - Ethereum: &#x60;ropsten&#x60; 
     - returns: RequestBuilder<[TokenMetadataResponse]> 
     */
    open class func listAllTokensWithRequestBuilder(blockchain: Blockchain_listAllTokens, network: String) -> RequestBuilder<[TokenMetadataResponse]> {
        var localVariablePath = "/{blockchain}/{network}/all_tokens"
        let blockchainPreEscape = "\(blockchain.rawValue)"
        let blockchainPostEscape = blockchainPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{blockchain}", with: blockchainPostEscape, options: .literal, range: nil)
        let networkPreEscape = "\(APIHelper.mapValueToPathItem(network))"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TokenMetadataResponse]>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
