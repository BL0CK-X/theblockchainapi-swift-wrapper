//
// SolanaNFTMarketplacesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SolanaNFTMarketplacesAPI {

    /**
     * enum for parameter network
     */
    public enum Network_solanaBuyNFT: String, CaseIterable {
        case devnet = "devnet"
        case mainnetBeta = "mainnet-beta"
    }

    /**
     * enum for parameter exchange
     */
    public enum Exchange_solanaBuyNFT: String, CaseIterable {
        case magicEden = "magic-eden"
    }

    /**
     Buy
     
     - parameter network: (path) The network ID 
     - parameter exchange: (path) The NFT exchange to interact with 
     - parameter mintAddress: (path) The mint address of the NFT you want to buy 
     - parameter buyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func solanaBuyNFT(network: Network_solanaBuyNFT, exchange: Exchange_solanaBuyNFT, mintAddress: String, buyRequest: BuyRequest? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: BuyResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return solanaBuyNFTWithRequestBuilder(network: network, exchange: exchange, mintAddress: mintAddress, buyRequest: buyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Buy
     - POST /solana/nft/marketplaces/{exchange}/buy/{network}/{mint_address}
     - <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/solana-nft-marketplaces/buy-nft\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Buy an NFT on a Solana Exchange.  Exchanges supported: SolSea, Magic Eden  `Cost: 25 Credits`, `Cost: 3 Credits on Devnet` (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter network: (path) The network ID 
     - parameter exchange: (path) The NFT exchange to interact with 
     - parameter mintAddress: (path) The mint address of the NFT you want to buy 
     - parameter buyRequest: (body)  (optional)
     - returns: RequestBuilder<BuyResponse> 
     */
    open class func solanaBuyNFTWithRequestBuilder(network: Network_solanaBuyNFT, exchange: Exchange_solanaBuyNFT, mintAddress: String, buyRequest: BuyRequest? = nil) -> RequestBuilder<BuyResponse> {
        var localVariablePath = "/solana/nft/marketplaces/{exchange}/buy/{network}/{mint_address}"
        let networkPreEscape = "\(network.rawValue)"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let exchangePreEscape = "\(exchange.rawValue)"
        let exchangePostEscape = exchangePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchange}", with: exchangePostEscape, options: .literal, range: nil)
        let mintAddressPreEscape = "\(APIHelper.mapValueToPathItem(mintAddress))"
        let mintAddressPostEscape = mintAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mint_address}", with: mintAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: buyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BuyResponse>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter network
     */
    public enum Network_solanaDelistNFT: String, CaseIterable {
        case devnet = "devnet"
        case mainnetBeta = "mainnet-beta"
    }

    /**
     * enum for parameter exchange
     */
    public enum Exchange_solanaDelistNFT: String, CaseIterable {
        case magicEden = "magic-eden"
    }

    /**
     Delist
     
     - parameter network: (path) The network ID 
     - parameter exchange: (path) The NFT exchange to interact with 
     - parameter mintAddress: (path) The mint address of the NFT you want to buy 
     - parameter delistRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func solanaDelistNFT(network: Network_solanaDelistNFT, exchange: Exchange_solanaDelistNFT, mintAddress: String, delistRequest: DelistRequest? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: DelistResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return solanaDelistNFTWithRequestBuilder(network: network, exchange: exchange, mintAddress: mintAddress, delistRequest: delistRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delist
     - POST /solana/nft/marketplaces/{exchange}/delist/{network}/{mint_address}
     - <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/solana-nft-marketplaces/delist-nft\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Delist an NFT from a Solana Exchange.  Exchanges supported: SolSea, Magic Eden  `Cost: 8 Credits`, `Cost: 3 Credits on Devnet` (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter network: (path) The network ID 
     - parameter exchange: (path) The NFT exchange to interact with 
     - parameter mintAddress: (path) The mint address of the NFT you want to buy 
     - parameter delistRequest: (body)  (optional)
     - returns: RequestBuilder<DelistResponse> 
     */
    open class func solanaDelistNFTWithRequestBuilder(network: Network_solanaDelistNFT, exchange: Exchange_solanaDelistNFT, mintAddress: String, delistRequest: DelistRequest? = nil) -> RequestBuilder<DelistResponse> {
        var localVariablePath = "/solana/nft/marketplaces/{exchange}/delist/{network}/{mint_address}"
        let networkPreEscape = "\(network.rawValue)"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let exchangePreEscape = "\(exchange.rawValue)"
        let exchangePostEscape = exchangePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchange}", with: exchangePostEscape, options: .literal, range: nil)
        let mintAddressPreEscape = "\(APIHelper.mapValueToPathItem(mintAddress))"
        let mintAddressPostEscape = mintAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mint_address}", with: mintAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: delistRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DelistResponse>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter network
     */
    public enum Network_solanaGetNFTListing: String, CaseIterable {
        case devnet = "devnet"
        case mainnetBeta = "mainnet-beta"
    }

    /**
     Get NFT Listing
     
     - parameter network: (path) The network ID 
     - parameter mintAddress: (path) The mint address of the NFT you want to buy 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func solanaGetNFTListing(network: Network_solanaGetNFTListing, mintAddress: String, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: GetNFTListingResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return solanaGetNFTListingWithRequestBuilder(network: network, mintAddress: mintAddress).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get NFT Listing
     - GET /solana/nft/marketplaces/listing/{network}/{mint_address}
     - <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/solana-nft-marketplaces/get-nft-listing\" target=\"_blank\">See examples (Python, JavaScript)</a>.  Get the Marketplace listing of a Solana NFT.  Currently checks the following Solana NFT martketplaces: SolSea, Magic Eden, Solanart, Alpha Art, Digital Eyes, Exchange.art  `Cost: 1 Credits`, (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter network: (path) The network ID 
     - parameter mintAddress: (path) The mint address of the NFT you want to buy 
     - returns: RequestBuilder<GetNFTListingResponse> 
     */
    open class func solanaGetNFTListingWithRequestBuilder(network: Network_solanaGetNFTListing, mintAddress: String) -> RequestBuilder<GetNFTListingResponse> {
        var localVariablePath = "/solana/nft/marketplaces/listing/{network}/{mint_address}"
        let networkPreEscape = "\(network.rawValue)"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let mintAddressPreEscape = "\(APIHelper.mapValueToPathItem(mintAddress))"
        let mintAddressPostEscape = mintAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mint_address}", with: mintAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetNFTListingResponse>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     * enum for parameter network
     */
    public enum Network_solanaListNFT: String, CaseIterable {
        case devnet = "devnet"
        case mainnetBeta = "mainnet-beta"
    }

    /**
     * enum for parameter exchange
     */
    public enum Exchange_solanaListNFT: String, CaseIterable {
        case magicEden = "magic-eden"
    }

    /**
     List
     
     - parameter network: (path) The network ID 
     - parameter exchange: (path) The NFT exchange to interact with 
     - parameter mintAddress: (path) The mint address of the NFT you want to buy 
     - parameter listRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func solanaListNFT(network: Network_solanaListNFT, exchange: Exchange_solanaListNFT, mintAddress: String, listRequest: ListRequest? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: ListResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return solanaListNFTWithRequestBuilder(network: network, exchange: exchange, mintAddress: mintAddress, listRequest: listRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List
     - POST /solana/nft/marketplaces/{exchange}/list/{network}/{mint_address}
     - <a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/solana-nft-marketplaces/list-nft\" target=\"_blank\">See examples (Python, JavaScript)</a>.  List an NFT on a Solana Exchange.  Exchanges supported: SolSea, Magic Eden  `Cost: 12 Credits`, `Cost: 3 Credits on Devnet` (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter network: (path) The network ID 
     - parameter exchange: (path) The NFT exchange to interact with 
     - parameter mintAddress: (path) The mint address of the NFT you want to buy 
     - parameter listRequest: (body)  (optional)
     - returns: RequestBuilder<ListResponse> 
     */
    open class func solanaListNFTWithRequestBuilder(network: Network_solanaListNFT, exchange: Exchange_solanaListNFT, mintAddress: String, listRequest: ListRequest? = nil) -> RequestBuilder<ListResponse> {
        var localVariablePath = "/solana/nft/marketplaces/{exchange}/list/{network}/{mint_address}"
        let networkPreEscape = "\(network.rawValue)"
        let networkPostEscape = networkPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{network}", with: networkPostEscape, options: .literal, range: nil)
        let exchangePreEscape = "\(exchange.rawValue)"
        let exchangePostEscape = exchangePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchange}", with: exchangePostEscape, options: .literal, range: nil)
        let mintAddressPreEscape = "\(APIHelper.mapValueToPathItem(mintAddress))"
        let mintAddressPostEscape = mintAddressPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{mint_address}", with: mintAddressPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: listRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListResponse>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
