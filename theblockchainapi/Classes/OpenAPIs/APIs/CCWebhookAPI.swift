//
// CCWebhookAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CCWebhookAPI {

    /**
     Get a webhook 
     
     - parameter projectId: (path) The ID of the project. Created and returned when a project is created. 
     - parameter webhookIdentifier: (path) The ID of the webhook. Created and returned when a webhook is sent. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCCWebhook(projectId: String, webhookIdentifier: String, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: CCWebhook?, _ error: Error?) -> Void)) -> RequestTask {
        return getCCWebhookWithRequestBuilder(projectId: projectId, webhookIdentifier: webhookIdentifier).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a webhook 
     - POST /webhook/v1/project/{project_id}/webhook/{webhook_identifier}
     - Retrieve the details of a webhook sent to you.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter projectId: (path) The ID of the project. Created and returned when a project is created. 
     - parameter webhookIdentifier: (path) The ID of the webhook. Created and returned when a webhook is sent. 
     - returns: RequestBuilder<CCWebhook> 
     */
    open class func getCCWebhookWithRequestBuilder(projectId: String, webhookIdentifier: String) -> RequestBuilder<CCWebhook> {
        var localVariablePath = "/webhook/v1/project/{project_id}/webhook/{webhook_identifier}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let webhookIdentifierPreEscape = "\(APIHelper.mapValueToPathItem(webhookIdentifier))"
        let webhookIdentifierPostEscape = webhookIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhook_identifier}", with: webhookIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CCWebhook>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List project's webhooks 
     
     - parameter projectId: (path) The ID of the project. Created and returned when a project is created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listCCProjectWebhooks(projectId: String, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: [CCWebhook]?, _ error: Error?) -> Void)) -> RequestTask {
        return listCCProjectWebhooksWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List project's webhooks 
     - POST /webhook/v1/project/{project_id}/webhooks
     - List all webhooks sent to you and their respective responses from your server.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter projectId: (path) The ID of the project. Created and returned when a project is created. 
     - returns: RequestBuilder<[CCWebhook]> 
     */
    open class func listCCProjectWebhooksWithRequestBuilder(projectId: String) -> RequestBuilder<[CCWebhook]> {
        var localVariablePath = "/webhook/v1/project/{project_id}/webhooks"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CCWebhook]>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Validate a webhook 
     
     - parameter projectId: (path) The ID of the project. Created and returned when a project is created. 
     - parameter webhookIdentifier: (path) The ID of the webhook. Created and returned when a webhook is sent. 
     - parameter cCWebhookValidateRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func validateCCWebhook(projectId: String, webhookIdentifier: String, cCWebhookValidateRequest: CCWebhookValidateRequest? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return validateCCWebhookWithRequestBuilder(projectId: projectId, webhookIdentifier: webhookIdentifier, cCWebhookValidateRequest: cCWebhookValidateRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Validate a webhook 
     - POST /webhook/v1/project/{project_id}/webhook/{webhook_identifier}/validate
     - Validate whether a webhook you received was actually sent from us.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter projectId: (path) The ID of the project. Created and returned when a project is created. 
     - parameter webhookIdentifier: (path) The ID of the webhook. Created and returned when a webhook is sent. 
     - parameter cCWebhookValidateRequest: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func validateCCWebhookWithRequestBuilder(projectId: String, webhookIdentifier: String, cCWebhookValidateRequest: CCWebhookValidateRequest? = nil) -> RequestBuilder<Void> {
        var localVariablePath = "/webhook/v1/project/{project_id}/webhook/{webhook_identifier}/validate"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let webhookIdentifierPreEscape = "\(APIHelper.mapValueToPathItem(webhookIdentifier))"
        let webhookIdentifierPostEscape = webhookIdentifierPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhook_identifier}", with: webhookIdentifierPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cCWebhookValidateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = theblockchainapiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
