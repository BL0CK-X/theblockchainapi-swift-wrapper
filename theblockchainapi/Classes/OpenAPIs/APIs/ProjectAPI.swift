//
// ProjectAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProjectAPI {

    /**
     Create a project 
     
     - parameter projectCreateRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProject(projectCreateRequest: ProjectCreateRequest? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) {
        createProjectWithRequestBuilder(projectCreateRequest: projectCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a project 
     - POST /project
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  A project is an entire mini-API.  When you create a project, this initializes the project in our database and the API documentation for the project.  After initialization, you can <a href=\"#operation/createEndpoint\">add endpoints</a> to the documentation and deploy the project's mini-API to our servers. Learn more <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter projectCreateRequest: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func createProjectWithRequestBuilder(projectCreateRequest: ProjectCreateRequest? = nil) -> RequestBuilder<Project> {
        let localVariablePath = "/project"
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: projectCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Create a new project version 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter UNKNOWN_PARAMETER_NAME2: (path) The version of the project. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createProjectVersion(UNKNOWN_PARAMETER_NAME: , UNKNOWN_PARAMETER_NAME2: , apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) {
        createProjectVersionWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2: UNKNOWN_PARAMETER_NAME2).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new project version 
     - POST /project/{project_id}/{version}
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Create a new version for the project. The version must be higher than all existing versions. This will duplicate the existing project's latest version and auto-deploy it. To update these endpoints, simply redeploy on this project's versions.  When a project is first created, it uses the default \"0.0.1\" version.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter UNKNOWN_PARAMETER_NAME2: (path) The version of the project. 
     - returns: RequestBuilder<Project> 
     */
    open class func createProjectVersionWithRequestBuilder(UNKNOWN_PARAMETER_NAME: , UNKNOWN_PARAMETER_NAME2: ) -> RequestBuilder<Project> {
        var localVariablePath = "/project/{project_id}/{version}"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let UNKNOWN_PARAMETER_NAME2PreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME2))"
        let UNKNOWN_PARAMETER_NAME2PostEscape = UNKNOWN_PARAMETER_NAME2PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: UNKNOWN_PARAMETER_NAME2PostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete a project 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProject(UNKNOWN_PARAMETER_NAME: , apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        deleteProjectWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a project 
     - DELETE /project/{project_id}
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Deletes a project. This will remove the mini-API entirely from our system.   `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectWithRequestBuilder(UNKNOWN_PARAMETER_NAME: ) -> RequestBuilder<Void> {
        var localVariablePath = "/project/{project_id}"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = theblockchainapiAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete a project version 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter UNKNOWN_PARAMETER_NAME2: (path) The version of the project. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteProjectVersion(UNKNOWN_PARAMETER_NAME: , UNKNOWN_PARAMETER_NAME2: , apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) {
        deleteProjectVersionWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2: UNKNOWN_PARAMETER_NAME2).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a project version 
     - DELETE /project/{project_id}/{version}
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Delete a version for the project. There must always be at least one version deployed, so you cannot delete the last remaining version of the project. This will auto-deploy the project and update its documentation, if necessary.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter UNKNOWN_PARAMETER_NAME2: (path) The version of the project. 
     - returns: RequestBuilder<Project> 
     */
    open class func deleteProjectVersionWithRequestBuilder(UNKNOWN_PARAMETER_NAME: , UNKNOWN_PARAMETER_NAME2: ) -> RequestBuilder<Project> {
        var localVariablePath = "/project/{project_id}/{version}"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let UNKNOWN_PARAMETER_NAME2PreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME2))"
        let UNKNOWN_PARAMETER_NAME2PostEscape = UNKNOWN_PARAMETER_NAME2PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: UNKNOWN_PARAMETER_NAME2PostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a project's metadata 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProject(UNKNOWN_PARAMETER_NAME: , apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) {
        getProjectWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a project's metadata 
     - GET /project/{project_id}
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Update your project's metadata. None of these parameters are required. Just provide the parameters that you would like to update.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - returns: RequestBuilder<Project> 
     */
    open class func getProjectWithRequestBuilder(UNKNOWN_PARAMETER_NAME: ) -> RequestBuilder<Project> {
        var localVariablePath = "/project/{project_id}"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get deployment status 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectDeploymentStatus(UNKNOWN_PARAMETER_NAME: , apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) {
        getProjectDeploymentStatusWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get deployment status 
     - POST /project/{project_id}/deploy/status
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Get the deployment status for the project after uploading the binary. Will be: `DEPLOYED` or NOT `DEPLOYED`.  After it is `DEPLOYED`, you can then make requests to your API.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getProjectDeploymentStatusWithRequestBuilder(UNKNOWN_PARAMETER_NAME: ) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/project/{project_id}/deploy/status"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get the deployment URL 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter UNKNOWN_BASE_TYPE: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectDeploymentURL(UNKNOWN_PARAMETER_NAME: , UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: ProjectDeploymentURL?, _ error: Error?) -> Void)) {
        getProjectDeploymentURLWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME, UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get the deployment URL 
     - POST /project/{project_id}/deploy/url
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Get the deployment URL for the project.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter UNKNOWN_BASE_TYPE: (body)  (optional)
     - returns: RequestBuilder<ProjectDeploymentURL> 
     */
    open class func getProjectDeploymentURLWithRequestBuilder(UNKNOWN_PARAMETER_NAME: , UNKNOWN_BASE_TYPE: UNKNOWN_BASE_TYPE? = nil) -> RequestBuilder<ProjectDeploymentURL> {
        var localVariablePath = "/project/{project_id}/deploy/url"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: UNKNOWN_BASE_TYPE)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProjectDeploymentURL>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get a project's stats 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getProjectStats(UNKNOWN_PARAMETER_NAME: , apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: [StatItem]?, _ error: Error?) -> Void)) {
        getProjectStatsWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a project's stats 
     - GET /project/{project_id}/stats
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Get the usage stats for your mini-API.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - returns: RequestBuilder<[StatItem]> 
     */
    open class func getProjectStatsWithRequestBuilder(UNKNOWN_PARAMETER_NAME: ) -> RequestBuilder<[StatItem]> {
        var localVariablePath = "/project/{project_id}/stats"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[StatItem]>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     List projects 
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listProjects(apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: [Project]?, _ error: Error?) -> Void)) {
        listProjectsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List projects 
     - GET /project/list
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  List all projects associated with your account.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - returns: RequestBuilder<[Project]> 
     */
    open class func listProjectsWithRequestBuilder() -> RequestBuilder<[Project]> {
        let localVariablePath = "/project/list"
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Project]>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update a project 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter projectCreateRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProject(UNKNOWN_PARAMETER_NAME: , projectCreateRequest: ProjectCreateRequest? = nil, apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) {
        updateProjectWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME, projectCreateRequest: projectCreateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a project 
     - POST /project/{project_id}
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Update your project's metadata. None of these parameters are required. Just provide the parameters that you would like to update.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter projectCreateRequest: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func updateProjectWithRequestBuilder(UNKNOWN_PARAMETER_NAME: , projectCreateRequest: ProjectCreateRequest? = nil) -> RequestBuilder<Project> {
        var localVariablePath = "/project/{project_id}"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: projectCreateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update the project's documentation 
     
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter UNKNOWN_PARAMETER_NAME2: (path) The version of the project. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateProjectDocumentation(UNKNOWN_PARAMETER_NAME: , UNKNOWN_PARAMETER_NAME2: , apiResponseQueue: DispatchQueue = theblockchainapiAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) {
        updateProjectDocumentationWithRequestBuilder(UNKNOWN_PARAMETER_NAME: UNKNOWN_PARAMETER_NAME, UNKNOWN_PARAMETER_NAME2: UNKNOWN_PARAMETER_NAME2).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update the project's documentation 
     - POST /project/{project_id}/{version}/documentation
     - A complete example and walkthrough of the program can be found <a href=\"https://github.com/BL0CK-X/api-developer-program\" target=\"_blank\">here</a>.  Update your project's documentation.   Your project's documentation can only represent *one* version of your API.  Thus, when you call this, the `current_documentation_version` attribute of your project is set to the version supplied in the call.  `Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)
     - API Key:
       - type: apiKey APIKeyID 
       - name: APIKeyID
     - API Key:
       - type: apiKey APISecretKey 
       - name: APISecretKey
     - parameter UNKNOWN_PARAMETER_NAME: (path) The ID of the project. Created and returned when a project is created. 
     - parameter UNKNOWN_PARAMETER_NAME2: (path) The version of the project. 
     - returns: RequestBuilder<Project> 
     */
    open class func updateProjectDocumentationWithRequestBuilder(UNKNOWN_PARAMETER_NAME: , UNKNOWN_PARAMETER_NAME2: ) -> RequestBuilder<Project> {
        var localVariablePath = "/project/{project_id}/{version}/documentation"
        let UNKNOWN_PARAMETER_NAMEPreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME))"
        let UNKNOWN_PARAMETER_NAMEPostEscape = UNKNOWN_PARAMETER_NAMEPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: UNKNOWN_PARAMETER_NAMEPostEscape, options: .literal, range: nil)
        let UNKNOWN_PARAMETER_NAME2PreEscape = "\(APIHelper.mapValueToPathItem(UNKNOWN_PARAMETER_NAME2))"
        let UNKNOWN_PARAMETER_NAME2PostEscape = UNKNOWN_PARAMETER_NAME2PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{version}", with: UNKNOWN_PARAMETER_NAME2PostEscape, options: .literal, range: nil)
        let localVariableURLString = theblockchainapiAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = theblockchainapiAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
