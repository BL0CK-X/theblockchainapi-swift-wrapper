//
// GeneralBalanceRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GeneralBalanceRequest: Codable, JSONEncodable, Hashable {

    /** The address / public key of the wallet you're querying.  Examples: - Solana: `GKNcUmNacSJo4S2Kq3DuYRYRGw3sNUfJ4tyqd198t6vQ` - Ethereum: `0xa84b9478d203cd25dF722e83C87590f8028f6aAA` */
    public var blockchainIdentifier: String?
    /** The `unit` parameter is only applicable if you are trying to retrieve the balance of the native token (e.g., SOL, ETH, BNB).   Applicable units: - Solana: `lamport`, `sol` (1 SOL = 1e9 Lamports) - Ethereum: `wei`, `gwei`, `eth` */
    public var unit: String?
    /** The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten` */
    public var network: String?
    /** The `token_blockchain_identifier` identifies the token you wish to transfer.  - If you're transferring a native blockchain currency (e.g., SOL, ETH, BNB), then simply do not supply this value. - If you're transfering an NFT, then supply the token address of the NFT. On Solana, this is the `mint_address` or `mint` (the address of the mint). - If you're transfering a token, supply the token address. For Solana, you can find on this on the Solana Explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href=\"https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\" target=\"_blank\">Serum Token</a>) for the `token_address`.  Examples: - Ethereum: `0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48` - Solana: `CK1LHEANTu7RFqN3XMzo2AnZhyus2W1vue1njrxLEM1d` */
    public var tokenBlockchainIdentifier: String? = "null"

    public init(blockchainIdentifier: String? = nil, unit: String? = nil, network: String? = nil, tokenBlockchainIdentifier: String? = "null") {
        self.blockchainIdentifier = blockchainIdentifier
        self.unit = unit
        self.network = network
        self.tokenBlockchainIdentifier = tokenBlockchainIdentifier
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case blockchainIdentifier = "blockchain_identifier"
        case unit
        case network
        case tokenBlockchainIdentifier = "token_blockchain_identifier"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(blockchainIdentifier, forKey: .blockchainIdentifier)
        try container.encodeIfPresent(unit, forKey: .unit)
        try container.encodeIfPresent(network, forKey: .network)
        try container.encodeIfPresent(tokenBlockchainIdentifier, forKey: .tokenBlockchainIdentifier)
    }
}

