//
// GetCandyMetadataRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetCandyMetadataRequest: Codable, JSONEncodable, Hashable {

    public enum Network: String, Codable, CaseIterable {
        case devnet = "devnet"
        case mainnetBeta = "mainnet-beta"
    }
    public enum CandyMachineContractVersion: String, Codable, CaseIterable {
        case v1 = "v1"
        case v2 = "v2"
    }
    /** The ID of the candy machine. This is the same as `config_address` for `v2` candy machines (supply either).  */
    public var candyMachineId: String?
    /** The configuration address of the candy machine. This is the same as `candy_machine_id` for `v2` candy machines (supply either).  */
    public var configAddress: String?
    /** The uuid of the candy machine. This is an alphanumeric string of length six (e.g., HpVdfP), which corresponds to the first six characters of the config_address.  */
    public var uuid: String?
    public var network: Network? = .devnet
    /** The candy machine contract of the candy machine for which you are retrieving the metadata. If you are providing `v1` candy machine ID, set this to `v1`. If you are providing `v2` candy machine ID, set this to `v2`. If you don't know which version your candy machine is, check out <a href=\"#operation/solanaGetAccountIsCandyMachine\">this endpoint</a>.  */
    public var candyMachineContractVersion: CandyMachineContractVersion? = .v1

    public init(candyMachineId: String? = nil, configAddress: String? = nil, uuid: String? = nil, network: Network? = .devnet, candyMachineContractVersion: CandyMachineContractVersion? = .v1) {
        self.candyMachineId = candyMachineId
        self.configAddress = configAddress
        self.uuid = uuid
        self.network = network
        self.candyMachineContractVersion = candyMachineContractVersion
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case candyMachineId = "candy_machine_id"
        case configAddress = "config_address"
        case uuid
        case network
        case candyMachineContractVersion = "candy_machine_contract_version"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(candyMachineId, forKey: .candyMachineId)
        try container.encodeIfPresent(configAddress, forKey: .configAddress)
        try container.encodeIfPresent(uuid, forKey: .uuid)
        try container.encodeIfPresent(network, forKey: .network)
        try container.encodeIfPresent(candyMachineContractVersion, forKey: .candyMachineContractVersion)
    }
}

