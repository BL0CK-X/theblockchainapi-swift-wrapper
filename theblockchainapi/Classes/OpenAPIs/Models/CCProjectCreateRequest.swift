//
// CCProjectCreateRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** You can change any of these parameters after creating the project. None of these parameters are required.  */
public struct CCProjectCreateRequest: Codable, JSONEncodable, Hashable {

    /** The name of the project. This is shown to your users and should identify your company or organization.  */
    public var name: String
    /** The description of your project / company.  */
    public var description: String?
    /** A URL that identifies where we should make an API request to notify you of a new payment (e.g., api.myproject.com/crypto_payments/webhook). Learn more [here](#tag/CC-Webhook/operation/getCCWebhook).  */
    public var webhook: String?
    /** The website of your project / company.  */
    public var website: String?
    /** A Discord webhook. We will send a message to this channel to notify of payment. Learn more [here]().  */
    public var discordWebhook: String?
    /** A URL of your logo.  */
    public var logoUrl: String?
    public var customerIdToCollect: CCProjectCreateRequestCustomerIdToCollect?
    /** Where to redirect customers after payment. If not supplied, customers will be redirected to checkout.blockchainapi.com/me to view their subscriptions.  */
    public var successUrl: String?
    public var payoutMethod: CCProjectCreateRequestPayoutMethod?

    public init(name: String, description: String? = nil, webhook: String? = nil, website: String? = nil, discordWebhook: String? = nil, logoUrl: String? = nil, customerIdToCollect: CCProjectCreateRequestCustomerIdToCollect? = nil, successUrl: String? = nil, payoutMethod: CCProjectCreateRequestPayoutMethod? = nil) {
        self.name = name
        self.description = description
        self.webhook = webhook
        self.website = website
        self.discordWebhook = discordWebhook
        self.logoUrl = logoUrl
        self.customerIdToCollect = customerIdToCollect
        self.successUrl = successUrl
        self.payoutMethod = payoutMethod
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case webhook
        case website
        case discordWebhook = "discord_webhook"
        case logoUrl = "logo_url"
        case customerIdToCollect = "customer_id_to_collect"
        case successUrl = "success_url"
        case payoutMethod = "payout_method"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(webhook, forKey: .webhook)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encodeIfPresent(discordWebhook, forKey: .discordWebhook)
        try container.encodeIfPresent(logoUrl, forKey: .logoUrl)
        try container.encodeIfPresent(customerIdToCollect, forKey: .customerIdToCollect)
        try container.encodeIfPresent(successUrl, forKey: .successUrl)
        try container.encodeIfPresent(payoutMethod, forKey: .payoutMethod)
    }
}

