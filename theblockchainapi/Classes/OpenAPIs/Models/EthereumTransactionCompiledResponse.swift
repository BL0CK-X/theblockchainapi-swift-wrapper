//
// EthereumTransactionCompiledResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EthereumTransactionCompiledResponse: Codable, JSONEncodable, Hashable {

    /** Indicates the chain that the transaction was compiled for (e.g., ropsten or mainnet).  */
    public var chainId: String?
    /** The transaction data  */
    public var data: String?
    /** The address expected to sign and submit the transaction  */
    public var from: String?
    /** The contract. This should match your provided value for `token_blockchain_identifier`.  */
    public var to: String?
    public var gas: Double?
    public var maxFeePerGas: Double?
    public var maxPriorityFeePerGas: Double?
    public var nonce: Double?
    public var value: Double?

    public init(chainId: String? = nil, data: String? = nil, from: String? = nil, to: String? = nil, gas: Double? = nil, maxFeePerGas: Double? = nil, maxPriorityFeePerGas: Double? = nil, nonce: Double? = nil, value: Double? = nil) {
        self.chainId = chainId
        self.data = data
        self.from = from
        self.to = to
        self.gas = gas
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.nonce = nonce
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case chainId = "chain_id"
        case data
        case from
        case to
        case gas
        case maxFeePerGas = "max_fee_per_gas"
        case maxPriorityFeePerGas = "max_priority_fee_per_gas"
        case nonce
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(chainId, forKey: .chainId)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(gas, forKey: .gas)
        try container.encodeIfPresent(maxFeePerGas, forKey: .maxFeePerGas)
        try container.encodeIfPresent(maxPriorityFeePerGas, forKey: .maxPriorityFeePerGas)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encodeIfPresent(value, forKey: .value)
    }
}

