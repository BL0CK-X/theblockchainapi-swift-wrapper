//
// AvalancheXPChainPublicAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AvalancheXPChainPublicAddress: Codable, JSONEncodable, Hashable {

    /** The bech-32 encoded public address of the wallet, commonly used for the X and P chains of Avalanche. (e.g., `X-avax1rlxm7ygahlzfjgj4s965t0lk0ucm8v48rc9r5r`)  */
    public var bechPublicAddress: String?
    /** The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)  */
    public var hexPublicAddress: String?

    public init(bechPublicAddress: String? = nil, hexPublicAddress: String? = nil) {
        self.bechPublicAddress = bechPublicAddress
        self.hexPublicAddress = hexPublicAddress
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bechPublicAddress = "bech_public_address"
        case hexPublicAddress = "hex_public_address"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bechPublicAddress, forKey: .bechPublicAddress)
        try container.encodeIfPresent(hexPublicAddress, forKey: .hexPublicAddress)
    }
}

