//
// Project.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Project: Codable, JSONEncodable, Hashable {

    /** The ID of the project. This is auto-generated upon project creation and cannot currently be changed.  */
    public var projectId: String?
    /** The name of the mini-API. This will be shown at the top of the mini-API's documentation.  */
    public var projectName: String?
    /** The description of the mini-API. This will be shown at the top of the mini-API's documentation, below the title.  */
    public var projectDescription: String?
    /** The email where users of your mini-API can contact you. This will be shown at the top of the mini-API's documentation.  */
    public var contactEmail: String?
    /** The version of the API that the documentation is updated for. You can set the documentation version to any valid version. To see how to format the version string, see the description for `versions`.  */
    public var currentDocumentationVersion: String?
    /** The live versions of the project. An array of strings. We use Python's `version` package to see if it's a valid version and to compare versions (to see which is higher).  Read more about this Python package <a href=\"https://packaging.pypa.io/en/latest/version.html#packaging.version.parse\" target=\"_blank\">here</a>. */
    public var versions: [String]?
    /** A list of groups. A section contains groups, and groups contain API endpoints.   */
    public var groups: [Group]?
    /** A list of groups. A section contains groups, and groups contain API endpoints.   */
    public var endpoints: [Endpoint]?

    public init(projectId: String? = nil, projectName: String? = nil, projectDescription: String? = nil, contactEmail: String? = nil, currentDocumentationVersion: String? = nil, versions: [String]? = nil, groups: [Group]? = nil, endpoints: [Endpoint]? = nil) {
        self.projectId = projectId
        self.projectName = projectName
        self.projectDescription = projectDescription
        self.contactEmail = contactEmail
        self.currentDocumentationVersion = currentDocumentationVersion
        self.versions = versions
        self.groups = groups
        self.endpoints = endpoints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case projectId = "project_id"
        case projectName = "project_name"
        case projectDescription = "project_description"
        case contactEmail = "contact_email"
        case currentDocumentationVersion = "current_documentation_version"
        case versions
        case groups
        case endpoints
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(projectId, forKey: .projectId)
        try container.encodeIfPresent(projectName, forKey: .projectName)
        try container.encodeIfPresent(projectDescription, forKey: .projectDescription)
        try container.encodeIfPresent(contactEmail, forKey: .contactEmail)
        try container.encodeIfPresent(currentDocumentationVersion, forKey: .currentDocumentationVersion)
        try container.encodeIfPresent(versions, forKey: .versions)
        try container.encodeIfPresent(groups, forKey: .groups)
        try container.encodeIfPresent(endpoints, forKey: .endpoints)
    }
}

