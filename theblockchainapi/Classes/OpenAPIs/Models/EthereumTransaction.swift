//
// EthereumTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EthereumTransaction: Codable, JSONEncodable, Hashable {

    public var accessList: AnyCodable?
    public var blockHash: String?
    public var blockNumber: String?
    public var chainId: String?
    public var from: String?
    public var gas: String?
    public var gasPrice: String?
    public var hash: String?
    public var input: String?
    public var maxFeePerGas: String?
    public var maxPriorityFeePerGas: String?
    public var nonce: String?
    public var r: String?
    public var s: String?
    public var to: String?
    public var transactionIndex: String?
    public var type: String?
    public var v: String?
    public var value: String?

    public init(accessList: AnyCodable? = nil, blockHash: String? = nil, blockNumber: String? = nil, chainId: String? = nil, from: String? = nil, gas: String? = nil, gasPrice: String? = nil, hash: String? = nil, input: String? = nil, maxFeePerGas: String? = nil, maxPriorityFeePerGas: String? = nil, nonce: String? = nil, r: String? = nil, s: String? = nil, to: String? = nil, transactionIndex: String? = nil, type: String? = nil, v: String? = nil, value: String? = nil) {
        self.accessList = accessList
        self.blockHash = blockHash
        self.blockNumber = blockNumber
        self.chainId = chainId
        self.from = from
        self.gas = gas
        self.gasPrice = gasPrice
        self.hash = hash
        self.input = input
        self.maxFeePerGas = maxFeePerGas
        self.maxPriorityFeePerGas = maxPriorityFeePerGas
        self.nonce = nonce
        self.r = r
        self.s = s
        self.to = to
        self.transactionIndex = transactionIndex
        self.type = type
        self.v = v
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessList = "access_list"
        case blockHash = "block_hash"
        case blockNumber = "block_number"
        case chainId = "chain_id"
        case from
        case gas
        case gasPrice = "gas_price"
        case hash
        case input
        case maxFeePerGas = "max_fee_per_gas"
        case maxPriorityFeePerGas = "max_priority_fee_per_gas"
        case nonce
        case r
        case s
        case to
        case transactionIndex = "transaction_index"
        case type
        case v
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accessList, forKey: .accessList)
        try container.encodeIfPresent(blockHash, forKey: .blockHash)
        try container.encodeIfPresent(blockNumber, forKey: .blockNumber)
        try container.encodeIfPresent(chainId, forKey: .chainId)
        try container.encodeIfPresent(from, forKey: .from)
        try container.encodeIfPresent(gas, forKey: .gas)
        try container.encodeIfPresent(gasPrice, forKey: .gasPrice)
        try container.encodeIfPresent(hash, forKey: .hash)
        try container.encodeIfPresent(input, forKey: .input)
        try container.encodeIfPresent(maxFeePerGas, forKey: .maxFeePerGas)
        try container.encodeIfPresent(maxPriorityFeePerGas, forKey: .maxPriorityFeePerGas)
        try container.encodeIfPresent(nonce, forKey: .nonce)
        try container.encodeIfPresent(r, forKey: .r)
        try container.encodeIfPresent(s, forKey: .s)
        try container.encodeIfPresent(to, forKey: .to)
        try container.encodeIfPresent(transactionIndex, forKey: .transactionIndex)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(v, forKey: .v)
        try container.encodeIfPresent(value, forKey: .value)
    }
}

