//
// TransferRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TransferRequest: Codable, Hashable {

    public enum Network: String, Codable, CaseIterable {
        case devnet = "devnet"
        case mainnetBeta = "mainnet-beta"
    }
    /** The public key address of the recipient to whom you want to send a token or NFT */
    public var recipientAddress: String
    public var wallet: Wallet
    /** If you're transfering an NFT, supply the `mint` (the address of the mint) for the `token_address`. If you're transfering a token, supply the token address found on the explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href=\"https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt\" target=\"_blank\">Serum Token</a>) for the `token_address`. If you're transferring SOL, do not supply a value for `token_address`.  */
    public var tokenAddress: String?
    public var network: Network? = .devnet
    /** This value must be a string. What you provide here depends on if you are sending an NFT, an SPL token, or SOL.  - NFT: This must be '1'. - SPL Token: This must be an integer in string format. To convert from what you see on a wallet UI (e.g., 1 ATLAS, 1 USDC) to an integer value, you have to multiply that value by 10^<i>x</i> where <i>x</i> is the number of decimals. For example, to transfer 0.2 USDC, if USDC uses 6 decimals, then the amount is 0.2 * 10^6 = 200000. You can get the number of decimals for a given SPL token <a href=\"#operation/solanaGetSPLToken\">here</a>. - SOL: Supply this value denominated in SOL in a string format. This does not need to be an integer. For example, if you want to send 0.0005 SOL, then amount = \"0.0005\". */
    public var amount: String? = "1"

    public init(recipientAddress: String, wallet: Wallet, tokenAddress: String? = nil, network: Network? = .devnet, amount: String? = "1") {
        self.recipientAddress = recipientAddress
        self.wallet = wallet
        self.tokenAddress = tokenAddress
        self.network = network
        self.amount = amount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case recipientAddress = "recipient_address"
        case wallet
        case tokenAddress = "token_address"
        case network
        case amount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(recipientAddress, forKey: .recipientAddress)
        try container.encode(wallet, forKey: .wallet)
        try container.encodeIfPresent(tokenAddress, forKey: .tokenAddress)
        try container.encodeIfPresent(network, forKey: .network)
        try container.encodeIfPresent(amount, forKey: .amount)
    }
}

