//
// StatItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct StatItem: Codable, Hashable {

    /** The anonymous ID of the user who called your endpoint  */
    public var uid: String?
    /** The time stamp of the ten-minute interval  */
    public var timeStamp: Double?
    /** The full path of the endpoint (e.g., `project_id`/`version`/`path`)  */
    public var endpointId: String?
    /** The number of API calls by this user to this endpoint for the ten-minute interval  */
    public var apiCalls: Double?
    /** The version of the endpoint */
    public var version: String?
    /** The path of the endpoint (not inclusive of the `version` or `project_id`) */
    public var path: String?

    public init(uid: String? = nil, timeStamp: Double? = nil, endpointId: String? = nil, apiCalls: Double? = nil, version: String? = nil, path: String? = nil) {
        self.uid = uid
        self.timeStamp = timeStamp
        self.endpointId = endpointId
        self.apiCalls = apiCalls
        self.version = version
        self.path = path
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case uid
        case timeStamp = "time_stamp"
        case endpointId = "endpoint_id"
        case apiCalls = "api_calls"
        case version
        case path
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(uid, forKey: .uid)
        try container.encodeIfPresent(timeStamp, forKey: .timeStamp)
        try container.encodeIfPresent(endpointId, forKey: .endpointId)
        try container.encodeIfPresent(apiCalls, forKey: .apiCalls)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(path, forKey: .path)
    }
}

