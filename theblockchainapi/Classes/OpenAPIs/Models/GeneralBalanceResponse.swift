//
// GeneralBalanceResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GeneralBalanceResponse: Codable, JSONEncodable, Hashable {

    /** The balance of the token in the wallet  */
    public var balance: Double
    /** Not included if retreiving native token (e.g., SOL, ETH, BNB, etc.) balance  */
    public var integerBalance: Double?
    /** Not included if retreiving native token (e.g., SOL, ETH, BNB, etc.) balance.  */
    public var decimals: Double?
    /** The network of the blockchain you selected  - Solana: `devnet`, `mainnet-beta` - Ethereum: `ropsten`, `mainnet`  Defaults when not provided (not applicable to path parameters): - Solana: `devnet` - Ethereum: `ropsten` */
    public var network: String
    /** Not included if retreiving a token / NFT balance  */
    public var unit: String?

    public init(balance: Double, integerBalance: Double? = nil, decimals: Double? = nil, network: String, unit: String? = nil) {
        self.balance = balance
        self.integerBalance = integerBalance
        self.decimals = decimals
        self.network = network
        self.unit = unit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case balance
        case integerBalance = "integer_balance"
        case decimals
        case network
        case unit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(balance, forKey: .balance)
        try container.encodeIfPresent(integerBalance, forKey: .integerBalance)
        try container.encodeIfPresent(decimals, forKey: .decimals)
        try container.encode(network, forKey: .network)
        try container.encodeIfPresent(unit, forKey: .unit)
    }
}

