//
// CCProjectCreateRequestCustomerIdToCollect.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The customer ID to collect during checkout. This could be a Twitter handle, a Telegram handle -- anything you use to identify your customers. We will collect it before they pay and link the payment to this ID. If you do not provide this, we will only be able to link the payment through either the customer&#39;s payment validation code, or their wallet&#39;s public key. If the users are signing in with their wallet in your application, then you can simply check whether they have paid through that.  */
public struct CCProjectCreateRequestCustomerIdToCollect: Codable, JSONEncodable, Hashable {

    public enum IdType: String, Codable, CaseIterable {
        case misc = "misc"
        case email = "email"
    }
    /** What type of identifier you are collecting, either an \"email\" or \"misc\"ellanous. Miscellanous simply means you are collecting something other than an email.   */
    public var idType: IdType
    /** The name of the customer ID input presented to the user  */
    public var name: String
    /** The description / stated purpose of the customer ID input presented to the user  */
    public var description: String? = ""
    /** Whether to require the customer ID  */
    public var _required: Bool? = false

    public init(idType: IdType, name: String, description: String? = "", _required: Bool? = false) {
        self.idType = idType
        self.name = name
        self.description = description
        self._required = _required
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case idType = "id_type"
        case name
        case description
        case _required = "required"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(idType, forKey: .idType)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(_required, forKey: ._required)
    }
}

