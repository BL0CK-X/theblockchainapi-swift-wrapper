//
// GetConfigInfoResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetConfigInfoResponse: Codable, Hashable {

    public var authority: String?
    public var creators: [GetConfigInfoResponseCreators]?
    public var isMutable: Bool?
    /** A public key address */
    public var retainAuthority: String?
    /** The fee of each sale the creators receive. 100 basis points = 1% */
    public var sellerFeeBasisPoints: Double?
    /** The symbol of the candy machine NFT colletion */
    public var symbol: String?

    public init(authority: String? = nil, creators: [GetConfigInfoResponseCreators]? = nil, isMutable: Bool? = nil, retainAuthority: String? = nil, sellerFeeBasisPoints: Double? = nil, symbol: String? = nil) {
        self.authority = authority
        self.creators = creators
        self.isMutable = isMutable
        self.retainAuthority = retainAuthority
        self.sellerFeeBasisPoints = sellerFeeBasisPoints
        self.symbol = symbol
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case authority
        case creators
        case isMutable = "is_mutable"
        case retainAuthority = "retain_authority"
        case sellerFeeBasisPoints = "seller_fee_basis_points"
        case symbol
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(authority, forKey: .authority)
        try container.encodeIfPresent(creators, forKey: .creators)
        try container.encodeIfPresent(isMutable, forKey: .isMutable)
        try container.encodeIfPresent(retainAuthority, forKey: .retainAuthority)
        try container.encodeIfPresent(sellerFeeBasisPoints, forKey: .sellerFeeBasisPoints)
        try container.encodeIfPresent(symbol, forKey: .symbol)
    }
}

