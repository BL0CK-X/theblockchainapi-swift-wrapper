//
// NFTAnalyticsResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NFTAnalyticsResponse: Codable, JSONEncodable, Hashable {

    /** The start time used in the API request.  */
    public var startTime: AnyCodable?
    /** The end time used in the API request.   */
    public var endTime: AnyCodable?
    public var transactionHistory: NFTAnalyticsResponseTransactionHistory?
    /** The minimum active listing price for the collection in the given time period. The listing must have been processed before `end_time` and still active (not delisted or purchased) by `end_time` in order to affect the floor calculation.  */
    public var floor: Double?
    /** The sum of the sale prices for the given time period.  */
    public var volume: Double?

    public init(startTime: AnyCodable? = nil, endTime: AnyCodable? = nil, transactionHistory: NFTAnalyticsResponseTransactionHistory? = nil, floor: Double? = nil, volume: Double? = nil) {
        self.startTime = startTime
        self.endTime = endTime
        self.transactionHistory = transactionHistory
        self.floor = floor
        self.volume = volume
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case startTime = "start_time"
        case endTime = "end_time"
        case transactionHistory = "transaction_history"
        case floor
        case volume
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(startTime, forKey: .startTime)
        try container.encodeIfPresent(endTime, forKey: .endTime)
        try container.encodeIfPresent(transactionHistory, forKey: .transactionHistory)
        try container.encodeIfPresent(floor, forKey: .floor)
        try container.encodeIfPresent(volume, forKey: .volume)
    }
}

