//
// GeneratePrivateKey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GeneratePrivateKey: Codable, JSONEncodable, Hashable {

    /** A private key corresponds to exactly one public key address. A private key can be used to move assets out of the wallet and sign transaction with the corresponding public key.  A private key is an array of integers (e.g.,   `[185,108,153,165,57,193,166,167,58,148,133,121,92,252,242,13,233,246,35,103,185,20,27,56,111,169,12,50,50,36,83,156,173,195,143,75,135,78,204,129,217,231,58,129,69,180,185,86,119,43,200,193,94,112,31,135,68,128,207,26,85,150,68,181]`).  <a href=\"https://solflare.com\" target=\"_blank\">Solflare</a> is a popular wallet interface on Solana that allows you to export your private key in this format. */
    public var privateKey: AnyCodable?
    /** A private key corresponds to exactly one public key address. A private key can be used to move assets out of the wallet and sign transaction with the corresponding public key.  A base58-encoded private key is a base58-encoded version of the typical private key. It is represented as a string (e.g., `4waBTVeAVWEAczSdx36uMrR19668ACgQDs7r386vrUes3UCzvXCQ2FPSCVGb1zJrwcULgpNzgABreyQaWSpGBwfx`).  <a href=\"https://phantom.app\" target=\"_blank\">Phantom</a> is a popular wallet interface on Solana that allows you to export your private key in this format. */
    public var b58PrivateKey: String?

    public init(privateKey: AnyCodable? = nil, b58PrivateKey: String? = nil) {
        self.privateKey = privateKey
        self.b58PrivateKey = b58PrivateKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case privateKey = "private_key"
        case b58PrivateKey = "b58_private_key"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(privateKey, forKey: .privateKey)
        try container.encodeIfPresent(b58PrivateKey, forKey: .b58PrivateKey)
    }
}

