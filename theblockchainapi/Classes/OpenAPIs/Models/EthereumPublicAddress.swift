//
// EthereumPublicAddress.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EthereumPublicAddress: Codable, JSONEncodable, Hashable {

    /** The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)  */
    public var hexPublicAddress: String?
    /** To public key in hex form of the wallet. This is hashed to get the hex public address. (e.g., `0x0f7182c2c2f79aca13847bed68c67662c021df868ee5d20a78df6095e4cd162610c63ec9050989a3755a18255cdd707e50678bfd762db3f0feea647610e974c4`)  */
    public var hexPublicKey: String?

    public init(hexPublicAddress: String? = nil, hexPublicKey: String? = nil) {
        self.hexPublicAddress = hexPublicAddress
        self.hexPublicKey = hexPublicKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hexPublicAddress = "hex_public_address"
        case hexPublicKey = "hex_public_key"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(hexPublicAddress, forKey: .hexPublicAddress)
        try container.encodeIfPresent(hexPublicKey, forKey: .hexPublicKey)
    }
}

