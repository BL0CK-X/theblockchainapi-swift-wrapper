//
// NFTData.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NFTData: Codable, Hashable {

    /** The creators of the NFT  */
    public var creators: [String]?
    /** The name of the NFT  */
    public var name: String?
    /** The portion of the seller fee that each creator receives. Index 0 corresponds to creator at index 0 in the creator array, and so on. Length of share array must be the same as the length of the creator array.  */
    public var share: [Float]?
    /** The symbol of the NFT  */
    public var symbol: String?
    /** The URI of the NFT  */
    public var uri: String?
    /** Whether or not the respective creator has signed the minting transaction of the NFT. Index 0 corresponds to creator at index 0 in the creator array, and so on. Length of verified array must be the same as the length of the creator array.  */
    public var verified: [Int]?

    public init(creators: [String]? = nil, name: String? = nil, share: [Float]? = nil, symbol: String? = nil, uri: String? = nil, verified: [Int]? = nil) {
        self.creators = creators
        self.name = name
        self.share = share
        self.symbol = symbol
        self.uri = uri
        self.verified = verified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case creators
        case name
        case share
        case symbol
        case uri
        case verified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(creators, forKey: .creators)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(share, forKey: .share)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(verified, forKey: .verified)
    }
}

