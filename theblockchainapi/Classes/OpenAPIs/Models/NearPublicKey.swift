//
// NearPublicKey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NearPublicKey: Codable, JSONEncodable, Hashable {

    /** The public key in hex form. This is used in the Near blockchain. (e.g., `0xdf96e3094ab33558dbe14e743aceded3779307b931e12bd6f526fe450db70910`)  */
    public var hexPublicKey: String?
    /** The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)  */
    public var hexPublicAddress: String?
    /** The public key in base58 form. This is used in the Solana blockchain. (e.g., `3Gdu3Uf97jw4Kac8xHEm5Hqmob3BrvJhf3We8s9t5Q2c`)  */
    public var publicKey: String?

    public init(hexPublicKey: String? = nil, hexPublicAddress: String? = nil, publicKey: String? = nil) {
        self.hexPublicKey = hexPublicKey
        self.hexPublicAddress = hexPublicAddress
        self.publicKey = publicKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case hexPublicKey = "hex_public_key"
        case hexPublicAddress = "hex_public_address"
        case publicKey = "public_key"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(hexPublicKey, forKey: .hexPublicKey)
        try container.encodeIfPresent(hexPublicAddress, forKey: .hexPublicAddress)
        try container.encodeIfPresent(publicKey, forKey: .publicKey)
    }
}

