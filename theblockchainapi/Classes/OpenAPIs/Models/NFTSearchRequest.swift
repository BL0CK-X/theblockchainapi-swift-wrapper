//
// NFTSearchRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NFTSearchRequest: Codable, Hashable {

    public enum UpdateAuthoritySearchMethod: String, Codable, CaseIterable {
        case exactMatch = "exact_match"
    }
    public enum MintAddressSearchMethod: String, Codable, CaseIterable {
        case exactMatch = "exact_match"
    }
    public enum NameSearchMethod: String, Codable, CaseIterable {
        case beginsWith = "begins_with"
        case exactMatch = "exact_match"
    }
    public enum UriSearchMethod: String, Codable, CaseIterable {
        case beginsWith = "begins_with"
        case exactMatch = "exact_match"
    }
    public enum SymbolSearchMethod: String, Codable, CaseIterable {
        case beginsWith = "begins_with"
        case exactMatch = "exact_match"
    }
    public enum Network: String, Codable, CaseIterable {
        case devnet = "devnet"
        case mainnetBeta = "mainnet-beta"
    }
    /** The public key of the update authority of the NFT */
    public var updateAuthority: String?
    /** Only `exact_match` supported at this time */
    public var updateAuthoritySearchMethod: UpdateAuthoritySearchMethod? = .exactMatch
    /** The mint address of the NFT */
    public var mintAddress: String?
    /** Only `exact_match` supported at this time */
    public var mintAddressSearchMethod: MintAddressSearchMethod? = .exactMatch
    /** The name of the NFT */
    public var name: String?
    public var nameSearchMethod: NameSearchMethod? = .exactMatch
    /** The NFT's uri */
    public var uri: String?
    public var uriSearchMethod: UriSearchMethod? = .exactMatch
    /** The symbol associated with the candy machine */
    public var symbol: String?
    public var symbolSearchMethod: SymbolSearchMethod? = .exactMatch
    public var network: Network? = .devnet

    public init(updateAuthority: String? = nil, updateAuthoritySearchMethod: UpdateAuthoritySearchMethod? = .exactMatch, mintAddress: String? = nil, mintAddressSearchMethod: MintAddressSearchMethod? = .exactMatch, name: String? = nil, nameSearchMethod: NameSearchMethod? = .exactMatch, uri: String? = nil, uriSearchMethod: UriSearchMethod? = .exactMatch, symbol: String? = nil, symbolSearchMethod: SymbolSearchMethod? = .exactMatch, network: Network? = .devnet) {
        self.updateAuthority = updateAuthority
        self.updateAuthoritySearchMethod = updateAuthoritySearchMethod
        self.mintAddress = mintAddress
        self.mintAddressSearchMethod = mintAddressSearchMethod
        self.name = name
        self.nameSearchMethod = nameSearchMethod
        self.uri = uri
        self.uriSearchMethod = uriSearchMethod
        self.symbol = symbol
        self.symbolSearchMethod = symbolSearchMethod
        self.network = network
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case updateAuthority = "update_authority"
        case updateAuthoritySearchMethod = "update_authority_search_method"
        case mintAddress = "mint_address"
        case mintAddressSearchMethod = "mint_address_search_method"
        case name
        case nameSearchMethod = "name_search_method"
        case uri
        case uriSearchMethod = "uri_search_method"
        case symbol
        case symbolSearchMethod = "symbol_search_method"
        case network
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(updateAuthority, forKey: .updateAuthority)
        try container.encodeIfPresent(updateAuthoritySearchMethod, forKey: .updateAuthoritySearchMethod)
        try container.encodeIfPresent(mintAddress, forKey: .mintAddress)
        try container.encodeIfPresent(mintAddressSearchMethod, forKey: .mintAddressSearchMethod)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(nameSearchMethod, forKey: .nameSearchMethod)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(uriSearchMethod, forKey: .uriSearchMethod)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(symbolSearchMethod, forKey: .symbolSearchMethod)
        try container.encodeIfPresent(network, forKey: .network)
    }
}

