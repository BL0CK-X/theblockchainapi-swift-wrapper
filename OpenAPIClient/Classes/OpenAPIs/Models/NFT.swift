//
// NFT.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NFT: Codable, Hashable {

    public var data: NFTData?
    public var isMutable: Bool?
    /** The public key address of the NFT  */
    public var mint: String?
    public var primarySaleHappened: Bool?
    /** A public key address that is usually that of the person who minted the NFT  */
    public var updateAuthority: String?

    public init(data: NFTData? = nil, isMutable: Bool? = nil, mint: String? = nil, primarySaleHappened: Bool? = nil, updateAuthority: String? = nil) {
        self.data = data
        self.isMutable = isMutable
        self.mint = mint
        self.primarySaleHappened = primarySaleHappened
        self.updateAuthority = updateAuthority
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case data
        case isMutable = "is_mutable"
        case mint
        case primarySaleHappened = "primary_sale_happened"
        case updateAuthority = "update_authority"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(isMutable, forKey: .isMutable)
        try container.encodeIfPresent(mint, forKey: .mint)
        try container.encodeIfPresent(primarySaleHappened, forKey: .primarySaleHappened)
        try container.encodeIfPresent(updateAuthority, forKey: .updateAuthority)
    }
}

